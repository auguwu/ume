#!/usr/bin/env bash

# vendored from:
# https://github.com/charted-dev/charted/blob/fd8ee07a34bb15e3bee3f3f74d5736c460a83154/src/ci/linux/release

# 🐻‍❄️📦 charted-server: Free, open source, and reliable Helm Chart registry made in Rust
# Copyright 2022-2025 Noelware, LLC. <team@noelware.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -euo pipefail

source "$(cd "$(dirname $0)" && pwd)/../_shared.sh"

buildflags=${BUILDFLAGS:-}
root=$(cd "$(dirname $0)/../.." && pwd)
cargo=${CARGO:-cargo}
rustflags=${RUSTFLAGS:-}
cargoflags=${CARGOFLAGS:-}
arch=""

if noelware::arch::x86_64; then
    arch="x86_64"
fi

if noelware::arch::aarch64; then
    arch="aarch64"
fi

prepare() {
    echo "~> install \`mold\`"
    if [ "$EUID" -ne 0 ]; then
        apt-get install -y mold
    else
        sudo apt-get install -y mold
    fi
}

build() {
    if ! command -v "$cargo" >/dev/null; then
        echo "~> Missing \`cargo\` binary (defined from \`\$CARGO\`: $cargo)"
        exit 1
    fi

    local bin="$1"

    export RUSTFLAGS="-Ctarget-cpu=native $rustflags"

    ! [ -d "$root/.result" ] && mkdir -p "$root/.result"
    pushd "$root/.result" >/dev/null

    echo "~> Performing compilation of binary \`$bin\`                  [buildflags=$buildflags] [\$CARGO=$cargo] [os=linux] [arch=$arch]"
    echo "   $ RUSTFLAGS=\"$RUSTFLAGS\" $cargo $cargoflags build --release --locked --bin $bin $buildflags"
    "$cargo" build $cargoflags --release --locked $buildflags --bin $bin || exit 1

    mv $root/target/release/"$bin" ./"$bin"-linux-$arch
    echo "~> Generating checksum                                        [binary=$bin]"
    sha256sum "$bin-linux-$arch" > ./"$bin"-linux-$arch.sha256

    echo "~> Completed. Artifacts are in $root/.result"

    popd >/dev/null
}

if noelware::isGitHubActions; then
    noelware::startGroup "Prepare"
    prepare
    noelware::endGroup
fi

noelware::startGroup "Building \`linux-$arch\` binary"
build "ume"
noelware::endGroup
